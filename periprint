#!/usr/bin/python3
# -*- coding: utf-8 -*-

# This Python file uses the following encoding: utf-8
import sys
import os


from PySide2.QtWidgets import QApplication, QWidget, QFileDialog, QGraphicsScene, QMessageBox, QComboBox
from PySide2.QtCore import Qt, QBuffer, QFile
from PySide2.QtUiTools import QUiLoader
from PySide2.QtGui import QImage, QPixmap, QPalette, QPainter, QTransform
#from PySide2.QtPrintSupport import QPrintDialog, QPrinter

# peripage imports
import ppa6
import numpy
from PIL import Image, ImageQt
import io
import time

import qrcode


class Peripage(QWidget):
    def __init__(self):
        super(Peripage, self).__init__()
        self.load_ui()

        for type in ppa6.PrinterType:
            self.window.comboPrinter.addItem(type.name)

        self.connected = False
        self.peripageType = ppa6.PrinterType[self.window.comboPrinter.currentText()]
        self.timeout = 5.0
        self.max_continuos_copies = 3
        self.pausa = 2.0

        self.window.connectButton.clicked.connect(self.connectPrinter)
        #self.window.printButton.clicked.connect(self.periPrintTest)
        self.window.printButton.clicked.connect(self.periPrintImage)
        self.window.breakButton.clicked.connect(self.paperFeed)
        self.window.loadButton.clicked.connect(self.open)
        self.window.rotateCWButton.clicked.connect(lambda: self.rotateImage(90))
        self.window.rotateACWButton.clicked.connect(lambda: self.rotateImage(-90))
        self.window.qrButton.clicked.connect(self.generateQR)
        self.window.qrLine.textChanged.connect(self.activateQR)
        self.window.comboPrinter.currentIndexChanged.connect(self.setPrinterType)

        self.scene = QGraphicsScene()
        self.window.immagine.setScene(self.scene)

    def connectPrinter(self):
        print(self.peripageType) #remember to remove after testing
        self.peripage = ppa6.Printer(self.window.mac.text(), self.peripageType, self.timeout)
        self.peripage.connect()
        self.peripage.reset()
        if self.peripage.isConnected():
            self.connected = True
        self.window.label_3.setEnabled(True)
        self.window.label_4.setEnabled(True)
        self.window.connected.setEnabled(True)
        self.window.percentuale.setText(str(self.peripage.getDeviceBattery()))
        self.window.percentuale.setEnabled(True)
        self.window.printButton.setEnabled(True)
        self.window.breakButton.setEnabled(True)

    def periPrintTest(self):
        if self.connected:
            self.peripage.setConcentration(self.window.contrast.value())
            self.peripage.writeASCII('FUNZIONA!!!\n')
            self.peripage.printBreak(self.window.breaklength.value())
            self.window.percentuale.setText(str(self.peripage.getDeviceBattery()))

    def periPrintImage(self):
        if self.connected:
            self.peripage.setConcentration(self.window.contrast.value())
            for i in range(self.window.copies.value()):          
                self.peripage.printImage(self.QImagetoPIL(self.image))
                self.peripage.printBreak(self.window.breaklength.value())
                if (self.window.copies.value() > self.max_continuos_copies):
                    time.sleep(self.pausa)
            #battery info update
            self.window.percentuale.setText(str(self.peripage.getDeviceBattery()))

    def paperFeed(self):
        if self.connected:
            self.peripage.printBreak(self.window.breaklength.value())
            #battery info update
            self.window.percentuale.setText(str(self.peripage.getDeviceBattery()))


    def open(self):
        options = QFileDialog.Options()
        fileName, _ = QFileDialog.getOpenFileName(self, 'Open image file', '',
                                                 'Images (*.png *.jpeg *.jpg *.bmp *.gif)', options=options)
        if fileName:
            self.image = QImage(fileName)
            if self.image.isNull():
                QMessageBox.information(self, "Image Viewer", "Cannot load %s." % fileName)
                return
            self.updateScene(self.image)
            #battery info update
            if self.connected:
                self.window.percentuale.setText(str(self.peripage.getDeviceBattery()))

    def activateQR(self):
        self.window.qrButton.setEnabled(True)
        #battery info update
        if self.connected:
            self.window.percentuale.setText(str(self.peripage.getDeviceBattery()))

    def generateQR(self):
        self.image = ImageQt.ImageQt(qrcode.make(self.window.qrLine.text(), border=self.window.qrBorder.value()).convert('L'))
        self.updateScene(self.image)
        #battery info update
        if self.connected:
            self.window.percentuale.setText(str(self.peripage.getDeviceBattery()))

    def QImagetoPIL(self, img):
        buffer = QBuffer()
        buffer.open(QBuffer.ReadWrite)
        img.save(buffer, "PNG")
        return Image.open(io.BytesIO(buffer.data().data()))

    def setPrinterType(self):
        self.peripageType = ppa6.PrinterType[self.window.comboPrinter.currentText()]

    def rotateImage(self, angle):
        transform = QTransform()
        transform.rotate(angle)
        self.image = self.image.transformed(transform)
        self.updateScene(self.image)

    def updateScene(self, img):
        self.scene.clear()
        self.scene.addPixmap(QPixmap.fromImage(img))
        self.window.immagine.fitInView(img.rect(), Qt.KeepAspectRatio)
        self.scene.update()
        if not self.window.rotateCWButton.isEnabled():
            self.window.rotateCWButton.setEnabled(True)
        if not self.window.rotateACWButton.isEnabled():
            self.window.rotateACWButton.setEnabled(True)    

    def load_ui(self):
        loader = QUiLoader()
        path = os.path.join(os.path.dirname(__file__), "form.ui")
        ui_file = QFile(path)
        ui_file.open(QFile.ReadOnly)
        self.window = loader.load(ui_file, self)
        ui_file.close()

if __name__ == "__main__":
    app = QApplication([])
    widget = Peripage()
    widget.show()
    sys.exit(app.exec_())
